<!DOCTYPE html>
<!-- saved from url=(0122)https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/ -->
<html class="gr__topcoder_com"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
            <title>Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library: Part II: Advanced Uses</title>
            <meta data-react-helmet="true" name="theme-color" content="#FFFFFF"><meta data-react-helmet="true" name="twitter:card" content="summary_large_image"><meta data-react-helmet="true" name="twitter:site" content="@Topcoder"><meta data-react-helmet="true" property="og:image:alt" content="Topcoder"><meta data-react-helmet="true" property="og:sitename" content="Topcoder">
            <link href="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/main-1556278029512.css" id="tru-style" rel="stylesheet">
            
            <link rel="shortcut icon" href="https://www.topcoder.com/favicon.ico">
            
            <meta content="width=device-width,initial-scale=1.0" name="viewport">
          <link data-chunk="topcoder-website/chunk" href="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/chunk-1556278029512.css" id="tru-style" rel="stylesheet"><script async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/fbevents.js"></script><script type="text/javascript" async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/analytics.js"></script><script type="text/javascript" async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/gtm.js"></script><script type="text/javascript" async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/heap-4240734066.js"></script><script type="text/javascript" async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/raven.min.js" crossorigin="anonymous"></script><script type="text/javascript" async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/messo.min.js"></script><script charset="utf-8" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/chunk-1556278029512.js"></script><script async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/hotjar-133597.js"></script><script async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/modules.af7c89be70ee2beba03f.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><link rel="manifest" href="https://www.topcoder.com/challenges/manifest.json" data-react-helmet="true"><meta name="twitter:image" content="http://www.topcoder.comhttps://d2nl5eqipnb33q.cloudfront.net/static-assets/images/ea451049daea868f371518a730c27b8e.jpg" data-react-helmet="true"><meta property="og:image" content="http://www.topcoder.comhttps://d2nl5eqipnb33q.cloudfront.net/static-assets/images/ea451049daea868f371518a730c27b8e.jpg" data-react-helmet="true"><meta property="description" content="Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library: Part II: Advanced Uses" data-react-helmet="true"><meta name="twitter:title" content="Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library: Part II: Advanced Uses" data-react-helmet="true"><meta name="twitter:description" content="Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library: Part II: Advanced Uses" data-react-helmet="true"><meta property="og:title" content="Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library: Part II: Advanced Uses" data-react-helmet="true"><meta property="og:description" content="Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library: Part II: Advanced Uses" data-react-helmet="true"></head>
          <body data-gr-c-s-loaded="true">
            <div id="react-view"><div><div><div><div class="_10hiPS"><div class="LwYWf2"><div class="oqm_lh"><a href="https://www.topcoder.com/" class="_2WLJ0i"><svg height="53" width="135" viewBox="0 0 135 21" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g fill="#57585A"><path d="M56.068 15.009V7.637h-1.71V6.65h1.71V3.822h1.133v2.83h2.094v.985h-2.094v7.2c0 .836.342 1.415 1.069 1.415.49 0 .918-.236 1.154-.493l.427.857c-.406.386-.898.643-1.752.643-1.368 0-2.03-.836-2.03-2.25M69.446 11.816c0-2.294-1.347-4.415-3.783-4.415-2.393 0-3.76 2.121-3.76 4.415 0 2.314 1.367 4.436 3.76 4.436 2.436 0 3.783-2.122 3.783-4.436m-8.74 0c0-3.022 1.944-5.422 4.957-5.422 3.056 0 4.98 2.4 4.98 5.422 0 3.021-1.924 5.443-4.98 5.443-3.013 0-4.958-2.422-4.958-5.443M81.199 11.816c0-2.508-1.304-4.415-3.612-4.415-1.432 0-2.8.857-3.398 1.843v5.122c.598.986 1.966 1.886 3.398 1.886 2.308 0 3.612-1.93 3.612-4.436m-7.01 3.514v5.615h-1.111V6.65h1.111V8.28c.727-1.05 2.052-1.886 3.59-1.886 2.757 0 4.616 2.1 4.616 5.422 0 3.3-1.859 5.443-4.616 5.443-1.453 0-2.756-.75-3.59-1.929M84.168 11.816c0-3.022 1.987-5.422 5.022-5.422 1.795 0 2.821.707 3.655 1.757l-.77.686c-.748-1.029-1.688-1.436-2.82-1.436-2.416 0-3.89 1.929-3.89 4.415 0 2.485 1.474 4.436 3.89 4.436 1.132 0 2.072-.429 2.82-1.458l.77.686c-.834 1.072-1.86 1.779-3.655 1.779-3.035 0-5.022-2.422-5.022-5.443M103.037 11.816c0-2.294-1.346-4.415-3.782-4.415-2.394 0-3.761 2.121-3.761 4.415 0 2.314 1.367 4.436 3.76 4.436 2.437 0 3.783-2.122 3.783-4.436m-8.74 0c0-3.022 1.944-5.422 4.958-5.422 3.056 0 4.98 2.4 4.98 5.422 0 3.021-1.924 5.443-4.98 5.443-3.014 0-4.958-2.422-4.958-5.443M114.277 14.409V9.287c-.598-1.008-1.945-1.886-3.397-1.886-2.287 0-3.613 1.929-3.613 4.436 0 2.507 1.326 4.415 3.613 4.415 1.452 0 2.799-.858 3.397-1.843zm0 2.593v-1.65c-.726 1.071-2.051 1.907-3.59 1.907-2.735 0-4.616-2.1-4.616-5.422 0-3.279 1.88-5.443 4.616-5.443 1.474 0 2.757.75 3.59 1.928V2.708h1.133v14.294h-1.133zM122.803 7.358c-2.436 0-3.654 2.143-3.74 3.943h7.502c-.022-1.757-1.176-3.943-3.762-3.943m-4.958 4.458c0-3 2.116-5.422 4.98-5.422 3.141 0 4.872 2.507 4.872 5.486v.3h-8.633c.106 2.25 1.602 4.114 4.039 4.114 1.303 0 2.5-.492 3.376-1.435l.577.728c-1.026 1.072-2.33 1.672-4.039 1.672-3.013 0-5.172-2.25-5.172-5.443M130.132 17.002V6.652h1.111V8.43c.876-1.158 2.052-1.993 3.484-1.993v1.221c-.192-.043-.342-.043-.556-.043-1.047 0-2.457.943-2.928 1.843v7.544h-1.11z"></path></g><path d="M12.658 6.405C6.905 5.375 1.484 5.463.395 8.35c-.767 2.034.803 5.104 3.5 8.133.795.893 1.715 1.178 2.579 1.172.8-3.972 3.987-8.216 6.184-11.249z" fill="#2AA7DF"></path><path d="M25.943 9.49c2.954-1.195 6.972-2.393 10.84-3.086.197.191.392.387.584.586-3.588-3.73-8.24-6.029-12.65-6.029-4.176 0-8.567 2.06-12.066 5.443 3.867.693 7.885 1.891 10.84 3.087.373.151.785.314 1.225.486.44-.172.853-.335 1.227-.486z" fill="#8AC441"></path><path d="M12.657 6.409c-3.036 2.968-6.19 8.783-6.19 11.242 1.048 0 2.298-.506 3.2-.972 4.493-2.323 9.136-6.09 15.023-6.704-2.989-1.304-8.76-3.127-12.033-3.566z" fill="#0A72B8"></path><path d="M36.791 6.4c5.74-1.025 11.143-.931 12.23 1.949.767 2.034-.804 5.104-3.5 8.133-.727.817-1.558 1.125-2.355 1.167-2.5-5.208-3.022-6.146-6.375-11.25z" fill="#F59022"></path><path d="M36.786 6.402c3.037 2.969 6.39 11.249 6.39 11.249-1.449.06-2.857-.746-3.272-.985-6.23-3.575-10.108-6.021-15.2-6.69 3.033-1.441 9.656-3.271 12.082-3.574z" fill="#FFF100"></path></g></svg></a><ul class="_1pz4Ls"><li data-menu="Compete" class="_2KIu68">Compete</li><li data-menu="Tracks" class="_2KIu68"><a href="https://www.topcoder.com/community/learn" rel="noopener noreferrer" target="">Tracks</a></li><li data-menu="Community" class="_2KIu68">Community</li></ul><div class="_34OkDS"><span class="_29jCNq"><div class="_3X0_rA" role="button" tabindex="0"><a class="tc-btn-sm tc-btn-primary" href="https://accounts.topcoder.com/member/registration?utm_source=community-app-main">Join</a><a class="tc-btn-sm tc-btn-default" href="https://accounts.topcoder.com/member?utm_source=community-app-main">Log In</a></div></span><div data-menu="search" class="_3w5nAb"><svg width="18" height="18" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg"><title>ico-magnifying_glass</title><path d="M7.383 1.807c2.938 0 5.328 2.406 5.328 5.362 0 2.957-2.39 5.362-5.328 5.362S2.054 10.126 2.054 7.17c0-2.956 2.391-5.362 5.33-5.362M11.677 12.9a7.092 7.092 0 0 1-4.295 1.44C3.44 14.34.242 11.13.242 7.17S3.439 0 7.383 0s7.142 3.21 7.142 7.17a7.157 7.157 0 0 1-1.435 4.312l4.524 4.542-1.417 1.411-4.519-4.536z" fill="#979797" fill-rule="evenodd"></path></svg></div></div></div><ul class="_1f8MfY"></ul><div class="_2VMzuT"><input placeholder="Find members by username or skill"></div><div class="iXzPsa"><div role="button" class="_2BxKlM" tabindex="0"><svg class="_1z8yhN" width="51" height="18" viewBox="0 0 51 18" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><path d="M12.814 5.616C6.896 4.556 1.32 4.647.2 7.616c-.79 2.092.826 5.25 3.6 8.365.817.92 1.764 1.212 2.653 1.206.822-4.086 4.101-8.451 6.36-11.57z" fill="#2AA7DF"></path><path d="M26.478 8.79c3.038-1.23 7.171-2.462 11.15-3.175.203.197.403.398.6.603C34.538 2.382 29.754.017 25.216.017c-4.294 0-8.81 2.119-12.41 5.598 3.978.713 8.11 1.945 11.15 3.175.384.156.807.323 1.26.5.453-.177.877-.344 1.262-.5z" fill="#8AC441"></path><path d="M12.812 5.62C9.69 8.673 6.446 14.654 6.446 17.183c1.078 0 2.364-.52 3.291-1 4.621-2.388 9.397-6.264 15.453-6.894-3.075-1.342-9.011-3.217-12.378-3.669z" fill="#0A72B8"></path><path d="M37.636 5.61c5.905-1.054 11.461-.957 12.579 2.006.79 2.092-.826 5.25-3.6 8.365-.747.84-1.602 1.157-2.422 1.2-2.572-5.357-3.108-6.321-6.557-11.57z" fill="#F59022"></path><path d="M37.631 5.613c3.123 3.054 6.572 11.57 6.572 11.57-1.49.063-2.938-.767-3.365-1.012-6.41-3.678-10.397-6.194-15.635-6.88 3.12-1.484 9.932-3.366 12.428-3.678z" fill="#FFF100"></path></g></svg><div class="_15GQqo">Menu</div><div class="o85U53"><div class="_3X0_rA" role="button" tabindex="0"><a class="tc-btn-sm tc-btn-primary" href="https://accounts.topcoder.com/member/registration?utm_source=community-app-main">Join</a><a class="tc-btn-sm tc-btn-default" href="https://accounts.topcoder.com/member?utm_source=community-app-main">Log In</a></div></div></div></div></div><div id="2lchTkakSIYuMEY6YyuOiy" class="_3Os8JP"><div id="1m190PYvAgAs0ugascMqOu" class="_3mNKVj"><div class="_1IC1O_"><div class="_2GR8ZB"><p>By <a href="https://www.topcoder.com/member-profile/DmitryKorolev">DmitryKorolev</a>– Topcoder Member</p><p>In this tutorial we will use some macros and typedefs from Part I of the tutorial.</p><p><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#creating">Creating Vector from Map</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#copying">Copying Data Between Containers</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#merging">Merging Lists</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#calculating">Calculating Algorithms</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#nontrivial">Nontrivial Sorting</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#using">Using Your Own Objects in Maps and Sets</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#memory">Memory Management in Vectors</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#implementing">Implementing Real Algorithms with STL</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#depth">Depth-first Search (DFS)</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#aword">A word on other container types and their usage</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#queue">Queue</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#breadth">Breadth-first Search (BFS)</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#priority">Priority_Queue</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#dijkstra">Dijkstra</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#dpriority">Dijkstra priority_queue</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#dbyset">Dijkstra by set</a><br><a href="https://www.topcoder.com/community/competitive-programming/tutorials/power-up-c-with-the-standard-template-library-part-2/#notincluded">What Is Not Included in STL</a></p><h3>Creating Vector from Map <a id="creating"></a></h3><p>As you already know, map actually contains pairs of element. So you can write it in like this:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code> map&lt; string, int &gt; M;<br>// ...<br>vector&lt; pair&lt; string, int &gt; &gt; V(all(M)); // remember all(c) stands for<br>(c).begin(),(c).end()<br></code></div></p><p>Now vector will contain the same elements as map. Of course, vector will be sorted, as is map. This feature may be useful if you are not planning to change elements in map any more but want to use indices of elements in a way that is impossible in map.</p><h3>Copying data between containers <a id="copying"></a></h3><p>Let’s take a look at the copy(…) algorithm. The prototype is the following:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>copy(from_begin, from_end, to_begin);<br></code></div></p><p>This algorithm copies elements from the first interval to the second one. The second interval should have enough space available. See the following code:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v1;<br>vector&lt; int &gt; v2; <br><br>// ... <br><br>// Now copy v2 to the end of v1<br>v1.resize(v1.size() + v2.size());<br>// Ensure v1 have enough space<br>copy(all(v2), v1.end() - v2.size());<br>// Copy v2 elements right after v1 ones<br></code></div></p><p>Another good feature to use in conjunction with copy is inserters. I will not describe it here due to limited space but look at the code:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v;<br>// ...<br>set&lt; int &gt; s;<br>// add some elements to set<br>copy(all(v), inserter(s));<br></code></div></p><p>The last line means:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>tr(v, it) {<br>// remember traversing macros from Part I<br>s.insert(*it);<br>}<br></code></div></p><p>But why use our own macros (which work only in gcc) when there is a standard function? It’s a good STL practice to use standard algorithms like copy, because it will be easy to others to understand your code.</p><p>To insert elemements to vector with push_back use back_inserter, or front_inserter is available for deque container. And in some cases it is useful to remember that the first two arguments for ‘copy’ may be not only begin/end, but also rbegin/rend, which copy data in reverse order.</p><h3>Merging lists <a id="merging"></a></h3><p>Another common task is to operate with sorted lists of elements. Imagine you have two lists of elements — A and B, both ordered. You want to get a new list from these two. There are four common operations here:</p><ul><li><p>‘union’ the lists, R = A+B</p></li><li><p>intersect the lists, R = A*B</p></li><li><p>set difference, R = A*(~B) or R = A-B</p></li><li><p>set symmetric difference, R = A XOR B</p></li></ul><p>STL provides four algorithms for these tasks: set_union(…), set_intersection(…), set_difference(…) and set_symmetric_difference(…). They all have the same calling conventions, so let’s look at set_intersection. A free-styled prototype would look like this:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>end_result = set_intersection(begin1, end1, begin2, end2, begin_result);<br></code></div></p><p>Here [begin1,end1] and [begin2,end2] are the input lists. The 'begin_result' is the iterator from where the result will be written. But the size of the result is unknown, so this function returns the end iterator of output (which determines how many elements are in the result). See the example for usage details:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>int data1[] = { 1, 2, 5, 6, 8, 9, 10 };<br>int data2[] = { 0, 2, 3, 4, 7, 8, 10 };</code></div></p><p>vector&lt; int &gt; v1(data1, data1+sizeof(data1)/sizeof(data1[0]));<br>vector&lt; int &gt; v2(data2, data2+sizeof(data2)/sizeof(data2[0]));</p><p>vector&lt; int &gt; tmp(max(v1.size(), v2.size());</p><p>vector&lt; int &gt; res = vector&lt; int &gt; (tmp.begin(), set_intersection(all(v1), all(v2), tmp.begin());<br></p><p>Look at the last line. We construct a new vector named 'res'. It is constructed via interval constructor, and the beginning of the interval will be the beginning of tmp. The end of the interval is the result of the set_intersection algorithm. This algorithm will intersect v1 and v2 and write the result to the output iterator, starting from 'tmp.begin()'. Its return value will actually be the end of the interval that forms the resulting dataset.</p><p>One comment that might help you understand it better: If you would like to just get the number of elements in set intersection, use int cnt = set_intersection(all(v1), all(v2), tmp.begin()) – tmp.begin();</p><p>Actually, I would never use a construction like ' vector&lt; int &gt; tmp'. I don't think it's a good idea to allocate memory for each set_*** algorithm invoking. Instead, I define the global or static variable of appropriate type and enough size. See below:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>set&lt; int &gt; s1, s2;<br>for(int i = 0; i &lt; 500; i++) {<br>s1.insert(i*(i+1) % 1000);<br>s2.insert(i<em>i</em>i % 1000);<br>} <br><br>static int temp[5000]; // greater than we need <br><br>vector&lt; int &gt; res = vi(temp, set_symmetric_difference(all(s1), all(s2), temp));<br>int cnt = set_symmetric_difference(all(s1), all(s2), temp) – temp;<br></code></div></p><p>Here 'res' will contain the symmetric difference of the input datasets.</p><p>Remember, input datasets need to be sorted to use these algorithms. So, another important thing to remember is that, because sets are always ordered, we can use set-s (and even map-s, if you are not scared by pairs) as parameters for these algorithms.</p><p>These algorithms work in single pass, in O(N1+N2), when N1 and N2 are sizes of input datasets.</p><h3>Calculating Algorithms <a id="calculating"></a></h3><p>Yet another interesting algorithm is accumulate(...). If called for a vector of int-s and third parameter zero, accumulate(...) will return the sum of elements in vector:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v;<br>// ...<br>int sum = accumulate(all(v), 0);<br></code></div></p><p>The result of accumulate() call always has the type of its third argument. So, if you are not sure that the sum fits in integer, specify the third parameter's type directly:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v;<br>// ...<br>long long sum = accumulate(all(v), (long long)0);<br></code></div></p><p>Accumulate can even calculate the product of values. The fourth parameter holds the predicate to use in calculations. So, if you want the product:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v;<br>// ...<br>double product = accumulate(all(v), double(1), multiplies&lt; double &gt;());<br>// don’t forget to start with 1 !<br></code></div></p><p>Another interesting algorithm is inner_product(...). It calculates the scalar product of two intervals. For example:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v1;<br>vector&lt; int &gt; v2;<br>for(int i = 0; i &lt; 3; i++) {<br>v1.push_back(10-i);<br>v2.push_back(i+1);<br>}<br>int r = inner_product(all(v1), v2.begin(), 0);<br></code></div></p><p>'r' will hold (v1[0]<em>v2[0] + v1[1]<em>v2[1] + v1[2]<em>v2[2]), or (10</em>1+9</em>2+8</em>3), which is 52.</p><p>As for ‘accumulate’ the type of return value for inner_product is defined by the last parameter. The last parameter is the initial value for the result. So, you may use inner_product for the hyperplane object in multidimensional space: just write inner_product(all(normal), point.begin(), -shift).</p><p>It should be clear to you now that inner_product requires only increment operation from iterators, so queues and sets can also be used as parameters. Convolution filter, for calculating the nontrivial median value, could look like this:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>set&lt; int &gt; values_ordered_data(all(data));<br>int n = sz(data); // int n = int(data.size());<br>vector&lt; int &gt; convolution_kernel(n);<br>for(int i = 0; i &lt; n; i++) {<br>convolution_kernel[i] = (i+1)*(n-i);<br>}<br>double result = double(inner_product(all(ordered_data), <br> convolution_kernel.begin(), 0)) / accumulate(all(convolution_kernel), 0);<br></code></div></p><p>Of course, this code is just an example -- practically speaking, it would be faster to copy values to another vector and sort it.</p><p>It's also possible to write a construction like this:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v;<br>// ...<br>int r = inner_product(all(v), v.rbegin(), 0);<br></code></div></p><p>This will evaluate V[0]*V[N-1] + V[1]+V[N-2] + ... + V[N-1]*V[0] where N is the number of elements in 'v'.</p><h3>Nontrivial Sorting <a id="nontrivial"></a></h3><p>Actually, sort(...) uses the same technique as all STL:</p><ul><li><p>all comparison is based on 'operator &lt;'</p></li></ul><p>This means that you only need to override 'operator &lt;'. Sample code follows:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>struct fraction {<br>int n, d; // (n/d)<br>// ...<br>bool operator &lt; (const fraction&amp; f) const {<br>if(false) {<br>return (double(n)/d) &lt; (double(f.n)/f.d);<br>// Try to avoid this, you're the TopCoder!<br>}<br>else {<br>return n<em>f.d &lt; f.n</em>d;<br>}<br>}<br>}; <br><br>// ... <br><br>vector&lt; fraction &gt; v; <br><br>// ... <br><br>sort(all(v));<br></code></div></p><p>In cases of nontrivial fields, your object should have default and copy constructor (and, maybe, assignment operator -- but this comment is not for Topcoders).</p><p>Remember the prototype of 'operator &lt;' : return type bool, const modifier, parameter const reference.</p><p>Another possibility is to create the comparison functor. Special comparison predicate may be passed to the sort(...) algorithm as a third parameter. Example: sort points (that are pair&lt;double,double&gt;) by polar angle.</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>typedef pair&lt; double, double &gt; dd; <br><br>const double epsilon = 1e-6; <br><br>struct sort_by_polar_angle {<br>dd center;<br>// Constuctor of any type<br>// Just find and store the center<br>template&lt; typename T &gt; sort_by_polar_angle(T b, T e) {<br>int count = 0;<br>center = dd(0,0);<br>while(b != e) {<br>center.first += b-&gt;first;<br>center.second += b-&gt;second;<br>b++;<br>count++;<br>}<br>double k = count ? (1.0/count) : 0;<br>center.first *= k;<br>center.second *= k;<br>}<br>// Compare two points, return true if the first one is earlier<br>// than the second one looking by polar angle<br>// Remember, that when writing comparator, you should<br>// override not ‘operator &lt;’ but ‘operator ()’<br>bool operator () (const dd&amp; a, const dd&amp; b) const {<br>double p1 = atan2(a.second-center.second, a.first-center.first);<br>double p2 = atan2(b.second-center.second, b.first-center.first);<br>return p1 + epsilon &lt; p2;<br>}<br>}; <br><br>// ... <br><br>vector&lt; dd &gt; points; <br><br>// ... <br><br>sort(all(points), sort_by_polar_angle(all(points)));<br></code></div></p><p>This code example is complex enough, but it does demonstrate the abilities of STL. I should point out that, in this sample, all code will be inlined during compilation, so it's actually really fast.</p><p>Also remember that 'operator &lt;' should always return false for equal objects. It's very important – for the reason why, see the next section.</p><h3>Using your own objects in Maps and Sets <a id="using"></a></h3><p>Elements in set and map are ordered. It's the general rule. So, if you want to enable using of your objects in set or map you should make them comparable. You already know the rule of comparisons in STL:</p><p>| * all comparison is based on 'operator &lt;'</p><p>Again, you should understand it in this way: "I only need to implement operator &lt; for objects to be stored in set/map."</p><p>Imagine you are going to make the 'struct point' (or 'class point'). We want to intersect some line segments and make a set of intersection points (sound familiar?). Due to finite computer precision, some points will be the same while their coordinates differ a bit. That's what you should write:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>const double epsilon = 1e-7; <br><br>struct point {<br>double x, y; <br><br>// ... <br><br>// Declare operator &lt; taking precision into account<br>bool operator &lt; (const point&amp; p) const {<br>if(x &lt; p.x - epsilon) return true;<br>if(x &gt; p.x + epsilon) return false;<br>if(y &lt; p.y - epsilon) return true;<br>if(y &gt; p.y + epsilon) return false;<br>return false;<br>}<br>};<br></code></div></p><p>Now you can use set&lt; point &gt; or map&lt; point, string &gt;, for example, to look up whether some point is already present in the list of intersections. An even more advanced approach: use map&lt;point, vector&lt; int &gt; &gt; and list the list of indices of segments that intersect at this point.</p><p>It's an interesting concept that for STL 'equal' does not mean 'the same', but we will not delve into it here.</p><h3>Memory management in Vectors <a id="memory"></a></h3><p>As has been said, vector does not reallocate memory on each push_back(). Indeed, when push_back() is invoked, vector really allocates more memory than is needed for one additional element. Most STL implementations of vector double in size when push_back() is invoked and memory is not allocated. This may not be good in practical purposes, because your program may eat up twice as much memory as you need. There are two easy ways to deal with it, and one complex way to solve it.</p><p>The first approach is to use the reserve() member function of vector. This function orders vector to allocate additional memory. Vector will not enlarge on push_back() operations until the size specified by reserve() will be reached.</p><p>Consider the following example. You have a vector of 1,000 elements and its allocated size is 1024. You are going to add 50 elements to it. If you call push_back() 50 times, the allocated size of vector will be 2048 after this operation. But if you write</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>v.reserve(1050);<br></code></div></p><p>before the series of push_back(), vector will have an allocated size of exactly 1050 elements.<br>vector<int> v;<br>// ...<br>vector<int>(all(v)).swap(v);<br>If you are a rapid user of push_back(), then reserve() is your friend.</int></int></p><p>By the way, it’s a good pattern to use v.reserve() followed by copy(…, back_inserter(v)) for vectors.</p><p>Another situation: after some manipulations with vector you have decided that no more adding will occur to it. How do you get rid of the potential allocation of additional memory? The solution follows:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vector&lt; int &gt; v;<br>// ...<br>vector&lt; int &gt;(all(v)).swap(v);<br></code></div></p><p>This construction means the following: create a temporary vector with the same content as v, and then swap this temporary vector with 'v'. After the swap the original oversized v will be disposed. But, most likely, you won’t need this during SRMs.</p><p>The proper and complex solution is to develop your own allocator for the vector, but that's definitely not a topic for a TopCoder STL tutorial.</p><h3>Implementing real algorithms with STL <a id="implementing"></a></h3><p>Armed with STL, let's go on to the most interesting part of this tutorial: how to implement real algorithms efficiently.</p><h4>Depth-first search (DFS) <a id="depth"></a></h4><p>I will not explain the theory of DFS here – instead, read this section of gladius's Introduction to Graphs and Data Structures tutorial – but I will show you how STL can help.</p><p>At first, imagine we have an undirected graph. The simplest way to store a graph in STL is to use the lists of vertices adjacent to each vertex. This leads to the vector&lt; vector<int> &gt; W structure, where W[i] is a list of vertices adjacent to i. Let’s verify our graph is connected via DFS:</int></p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>/*<br>Reminder from Part 1:<br>typedef vector&lt; int &gt; vi;<br>typedef vector&lt; vi &gt; vvi;<br>*/ <br><br>int N; // number of vertices<br>vvi W; // graph<br>vi V; // V is a visited flag <br><br>void dfs(int i) {<br>if(!V[i]) {<br>V[i] = true;<br>for_each(all(W[i]), dfs);<br>}<br>} <br><br>bool check_graph_connected_dfs() {<br>int start_vertex = 0;<br>V = vi(N, false);<br>dfs(start_vertex);<br>return (find(all(V), 0) == V.end());<br>}<br></code></div></p><p>That’s all. STL algorithm 'for_each' calls the specified function, 'dfs', for each element in range. In check_graph_connected() function we first make the Visited array (of correct size and filled with zeroes). After DFS we have either visited all vertices, or not – this is easy to determine by searching for at least one zero in V, by means of a single call to find().</p><p>Notice on for_each: the last argument of this algorithm can be almost anything that “can be called like a function”. It may be not only global function, but also adapters, standard algorithms, and even member functions. In the last case, you will need mem_fun or mem_fun_ref adapters, but we will not touch on those now.</p><p>One note on this code: I don't recommend the use of vector<bool>. Although in this particular case it’s quite safe, you're better off not to use it. Use the predefined ‘vi’ (vector<int>). It’s quite OK to assign true and false to int’s in vi. Of course, it requires 8<em>sizeof(int)=8</em>4=32 times more memory, but it works well in most cases and is quite fast on TopCoder.</int></bool></p><h4>A word on other container types and their usage <a id="aword"></a></h4><p>Vector is so popular because it's the simplest array container. In most cases you only require the functionality of an array from vector – but, sometimes, you may need a more advanced container.</p><p>It is not good practice to begin investigating the full functionality of some STL container during the heat of a Single Round Match. If you are not familiar with the container you are about to use, you'd be better off using vector or map/set. For example, stack can always be implemented via vector, and it’s much faster to act this way if you don’t remember the syntax of stack container.</p><p>STL provides the following containers: list, stack, queue, deque, priority_queue. I’ve found list and deque quite useless in SRMs (except, probably, for very special tasks based on these containers). But queue and priority_queue are worth saying a few words about.</p><h4>Queue <a id="queue"></a></h4><p>Queue is a data type that has three operations, all in O(1) amortized: add an element to front (to “head”) remove an element from back (from “tail”) get the first unfetched element (“tail”) In other words, queue is the FIFO buffer.</p><h4>Breadth-first search (BFS) <a id="breadth"></a></h4><p>Again, if you are not familiar with the BFS algorithm, please refer back to <a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=graphsDataStrucs2#breadth">this Topcoder tutorial</a> first. Queue is very convenient to use in BFS, as shown below:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>/*<br>Graph is considered to be stored as adjacent vertices list.<br>Also we considered graph undirected. <br><br>vvi is vector&lt; vector&lt; int &gt; &gt;<br>W[v] is the list of vertices adjacent to v<br>*/ <br><br>int N; // number of vertices<br>vvi W; // lists of adjacent vertices <br><br>bool check_graph_connected_bfs() {<br>int start_vertex = 0;<br>vi V(N, false);<br>queue&lt; int &gt; Q;<br>Q.push(start_vertex);<br>V[start_vertex] = true;<br>while(!Q.empty()) {<br>int i = Q.front();<br>// get the tail element from queue<br>Q.pop();<br>tr(W[i], it) {<br>if(!V[*it]) {<br>V[*it] = true;<br>Q.push(*it);<br>}<br>}<br>}<br>return (find(all(V), 0) == V.end());<br>}<br></code></div></p><p>More precisely, queue supports front(), back(), push() (== push_back()), pop (== pop_front()). If you also need push_front() and pop_back(), use deque. Deque provides the listed operations in O(1) amortized.</p><p>There is an interesting application of queue and map when implementing a shortest path search via BFS in a complex graph. Imagine that we have the graph, vertices of which are referenced by some complex object, like:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>pair&lt; pair&lt; int,int &gt;, pair&lt; string, vector &lt; pair&lt; int, int &gt; &gt; &gt; &gt; <br><br>(this case is quite usual: complex data structure may define the position in<br>some game, Rubik’s cube situation, etc…)<br></code></div></p><p>Consider we know that the path we are looking for is quite short, and the total number of positions is also small. If all edges of this graph have the same length of 1, we could use BFS to find a way in this graph. A section of pseudo-code follows:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>// Some very hard data structure<br>typedef pair&lt; pair&lt; int,int &gt;, pair&lt; string, vector&lt; pair&lt; int, int &gt; &gt; &gt; &gt; POS;<br>// ... <br><br>int find_shortest_path_length(POS start, POS finish) { <br><br>map&lt; POS, int &gt; D;<br>// shortest path length to this position<br>queue&lt; POS &gt; Q; <br><br>D[start] = 0; // start from here<br>Q.push(start); <br><br>while(!Q.empty()) {<br>POS current = Q.front();<br>// Peek the front element<br>Q.pop(); // remove it from queue <br><br>int current_length = D[current]; <br><br>if(current == finish) {<br>return D[current];<br>// shortest path is found, return its length<br>} <br><br>tr(all possible paths from 'current', it) {<br>if(!D.count(*it)) {<br>// same as if(D.find(*it) == D.end), see Part I<br>// This location was not visited yet<br>D[*it] = current_length + 1;<br>}<br>}<br>}<br>// Path was not found<br>return -1;<br>}<br>// ...<br></code></div></p><p>If the edges have different lengths, however, BFS will not work. We should use Dijkstra instead. It's possible to implement such a Dijkstra via priority_queue -- see below.</p><h4>Priority_Queue <a id="priority"></a></h4><p>Priority queue is the binary heap. It's the data structure, that can perform three operations:</p><ul><li><p>push any element (push)</p></li><li><p>view top element (top)</p></li><li><p>pop top element (pop)</p></li></ul><p>For the application of STL's priority_queue see the TrainRobber problem from SRM 307.</p><h4>Dijkstra <a id="dijkstra"></a></h4><p>In the last part of this tutorial I’ll describe how to efficiently implement Dijktra’s algorithm in sparse graph using STL containers. Please look through this tutorial for information on Dijkstra’s algoritm.</p><p>Consider we have a weighted directed graph that is stored as vector&lt; vector&lt; pair&lt;int,int&gt; &gt; &gt; G, where</p><p>G.size() is the number of vertices in our graph<br>G[i].size() is the number of vertices directly reachable from vertex with index i<br>G[i][j].first is the index of j-th vertex reachable from vertex i<br>G[i][j].second is the length of the edge heading from vertex i to vertex G[i][j].first<br>We assume this, as defined in the following two code snippets:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>typedef pair&lt; int,int &gt; ii;<br>typedef vector&lt; ii &gt; vii;<br>typedef vector&lt; vii &gt; vvii;<br></code></div></p><h4>Dijstra via priority_queue <a id="dpriority"></a></h4><p>Many thanks to <a href="https://www.topcoder.com/member-profile/misof">misof</a> for spending the time to explain to me why the complexity of this algorithm is good despite not removing deprecated entries from the queue.</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vi D(N, 987654321);<br>// distance from start vertex to each vertex <br><br>priority_queue&lt; ii,vector&lt; ii &gt;, greater&lt; ii &gt; &gt; Q;<br>// priority_queue with reverse comparison operator,<br>// so top() will return the least distance<br>// initialize the start vertex, suppose it’s zero<br>D[0] = 0;<br>Q.push(ii(0,0)); <br><br>// iterate while queue is not empty<br>while(!Q.empty()) { <br><br>// fetch the nearest element<br>ii top = Q.top();<br>Q.pop(); <br><br>// v is vertex index, d is the distance<br>int v = top.second, d = top.first; <br><br>// this check is very important<br>// we analyze each vertex only once<br>// the other occurrences of it on queue (added earlier)<br>// will have greater distance<br>if(d &lt;= D[v]) {<br>// iterate through all outcoming edges from v<br>tr(G[v], it) {<br>int v2 = it-&gt;first, cost = it-&gt;second;<br>if(D[v2] &gt; D[v] + cost) {<br>// update distance if possible<br>D[v2] = D[v] + cost;<br>// add the vertex to queue<br>Q.push(ii(D[v2], v2));<br>}<br>}<br>}<br>}<br></code></div></p><p>I will not comment on the algorithm itself in this tutorial, but you should notice the priority_queue object definition. Normally, priority_queue<ii> will work, but the top() member function will return the largest element, not the smallest. Yes, one of the easy solutions I often use is just to store not distance but (-distance) in the first element of a pair. But if you want to implement it in the “proper” way, you need to reverse the comparison operation of priority_queue to reverse one. Comparison function is the third template parameter of priority_queue while the second paramerer is the storage type for container. So, you should write priority_queue&lt; ii, vector<ii>, greater<ii> &gt;.</ii></ii></ii></p><h4>Dijkstra by set <a id="dbyset"></a></h4><p><a href="https://www.topcoder.com/member-profile/petr">Petr</a> gave me this idea when I asked him about efficient Dijkstra implementation in C#. While implementing Dijkstra we use the priority_queue to add elements to the “vertices being analyzed” queue in O(logN) and fetch in O(log N). But there is a container besides priority_queue that can provide us with this functionality -- it’s ‘set’! I’ve experimented a lot and found that the performance of Dijkstra based on priority_queue and set is the same.</p><p>So, here’s the code:</p><p><div style="background-color: rgb(245, 245, 245); margin: 15px; padding: 0px 15px 15px;"><code>vi D(N, 987654321); <br><br>// start vertex<br>set&lt; ii &gt; Q;<br>D[0] = 0;<br>Q.insert(ii(0,0)); <br><br>while(!Q.empty()) { <br><br>// again, fetch the closest to start element<br>// from “queue” organized via set<br>ii top = *Q.begin();<br>Q.erase(Q.begin());<br>int v = top.second, d = top.first; <br><br>// here we do not need to check whether the distance<br>// is perfect, because new vertices will always<br>// add up in proper way in this implementation <br><br>tr(G[v], it) {<br>int v2 = it-&gt;first, cost = it-&gt;second;<br>if(D[v2] &gt; D[v] + cost) {<br>// this operation can not be done with priority_queue,<br>// because it does not support DECREASE_KEY<br>if(D[v2] != 987654321) {<br>Q.erase(Q.find(ii(D[v2],v2)));<br>}<br>D[v2] = D[v] + cost;<br>Q.insert(ii(D[v2], v2));<br>}<br>}<br>}<br></code></div></p><p>One more important thing: STL’s priority_queue does not support the DECREASE_KEY operation. If you will need this operation, ‘set’ may be your best bet.</p><p>I’ve spent a lot of time to understand why the code that removes elements from queue (with set) works as fast as the first one.</p><p>These two implementations have the same complexity and work in the same time. Also, I’ve set up practical experiments and the performance is exactly the same (the difference is about ~%0.1 of time).</p><p>As for me, I prefer to implement Dijkstra via ‘set’ because with ‘set’ the logic is simpler to understand, and we don’t need to remember about ‘greater&lt; int &gt;’ predicate overriding.</p><h4>What is not included in STL <a id="notincluded"></a></h4><p>If you have made it this far in the tutorial, I hope you have seen that STL is a very powerful tool, especially for TopCoder SRMs. But before you embrace STL wholeheartedly, keep in mind what is NOT included in it.</p><p>First, STL does not have BigInteger-s. If a task in an SRM calls for huge calculations, especially multiplication and division, you have three options:</p><ul><li><p>use a pre-written template</p></li><li><p>use Java, if you know it well</p></li><li><p>say “Well, it was definitely not my SRM!”</p></li></ul><p>I would recommend option number one.</p><p>Nearly the same issue arises with the geometry library. STL does not have geometry support, so you have those same three options again.</p><p>The last thing – and sometimes a very annoying thing – is that STL does not have a built-in string splitting function. This is especially annoying, given that this function is included in the default template for C++ in the ExampleBuilder plugin! But actually I’ve found that the use of istringstream(s) in trivial cases and sscanf(s.c_str(), …) in complex cases is sufficient.</p><p>Those caveats aside, though, I hope you have found this tutorial useful, and I hope you find the STL a useful addition to your use of C++. Best of luck to you in the Arena!</p><p>Note from the author: In both parts of this tutorial I recommend the use of some templates to minimize the time required to implement something. I must say that this suggestion should always be up to the coder. Aside from whether templates are a good or bad tactic for SRMs, in everyday life they can become annoying for other people who are trying to understand your code. While I did rely on them for some time, ultimately I reached the decision to stop. I encourage you to weigh the pros and cons of templates and to consider this decision for yourself.</p></div></div></div></div><div class="_28yQ66"><nav><ul><li class="_3-nzmp"><a href="https://www.topcoder.com/community/about">ABOUT US</a></li><li class="_3-nzmp"><a href="https://www.topcoder.com/community/contact">CONTACT US</a></li><li class="_3-nzmp"><a href="https://help.topcoder.com/">HELP CENTER</a></li><li class="_3-nzmp"><a href="https://www.topcoder.com/community/how-it-works/privacy-policy/">PRIVACY POLICY</a></li><li class="_3-nzmp"><a href="https://www.topcoder.com/community/how-it-works/terms/">TERMS</a></li></ul></nav><div class="_2G4IaN"><hr><a href="https://www.facebook.com/topcoder" target="fbwindow"><svg width="27" height="28" viewBox="0 0 27 28" xmlns="http://www.w3.org/2000/svg"><title>icon facebook</title><path d="M24 .5H3c-1.65 0-3 1.35-3 3v21c0 1.651 1.35 3 3 3h10.5V17h-3v-3.713h3v-3.074c0-3.247 1.818-5.527 5.649-5.527l2.705.003v3.908h-1.796C18.567 8.597 18 9.716 18 10.754v2.535h3.852L21 17h-3v10.5h6c1.65 0 3-1.349 3-3v-21c0-1.65-1.35-3-3-3z" fill="#A3A3AD" fill-rule="evenodd"></path></svg></a><a href="http://www.twitter.com/topcoder" target="twwindow"><svg width="28" height="23" viewBox="0 0 28 23" xmlns="http://www.w3.org/2000/svg"><title>icon twitter</title><path d="M24.774 6.083c.012.243.016.489.016.732 0 7.485-5.695 16.113-16.11 16.113-3.199 0-6.174-.938-8.68-2.546.444.053.894.08 1.35.08 2.655 0 5.096-.906 7.032-2.422a5.668 5.668 0 0 1-5.289-3.932 5.787 5.787 0 0 0 2.557-.097A5.668 5.668 0 0 1 1.11 8.456v-.07c.763.424 1.637.679 2.564.709a5.662 5.662 0 0 1-1.751-7.561A16.073 16.073 0 0 0 13.593 7.45a5.72 5.72 0 0 1-.146-1.291A5.66 5.66 0 0 1 19.11.5c1.628 0 3.1.686 4.133 1.786 1.289-.255 2.501-.725 3.596-1.374a5.683 5.683 0 0 1-2.49 3.132 11.326 11.326 0 0 0 3.252-.89 11.435 11.435 0 0 1-2.826 2.929z" fill="#A3A3AD" fill-rule="evenodd"></path></svg></a><a href="https://www.linkedin.com/company/topcoder" target="liwindow"><svg width="27" height="28" viewBox="0 0 27 28" xmlns="http://www.w3.org/2000/svg"><title>icon linkedln</title><path d="M6 3.5c0 1.65-1.05 3-3 3-1.8 0-3-1.35-3-2.85C0 2 1.2.5 3 .5s3 1.35 3 3zm-6 24h6V8H0v19.5zM20.4 8.3c-3.15 0-4.95 1.8-5.7 3h-.15l-.3-2.55h-5.4c0 1.65.15 3.6.15 5.85v12.9h6V16.85c0-.6 0-1.05.15-1.5.45-1.05 1.2-2.4 2.85-2.4 2.1 0 3 1.8 3 4.2V27.5h6V16.4c0-5.55-2.85-8.1-6.6-8.1z" fill="#A3A3AD" fill-rule="evenodd"></path></svg></a><a href="https://www.instagram.com/topcoder" target="inwindow"><svg width="31" height="28" viewBox="0 -1 39 31" xmlns="http://www.w3.org/2000/svg"><title>icon instagram</title><g stroke="#A3A3AD" fill="#A3A3AD" fill-rule="evenodd"><path d="M16 2.883c4.272 0 4.778.016 6.465.093 1.821.083 3.511.448 4.811 1.748 1.3 1.3 1.665 2.99 1.748 4.811.077 1.687.093 2.193.093 6.465s-.016 4.778-.093 6.465c-.083 1.821-.448 3.511-1.748 4.811-1.3 1.3-2.99 1.665-4.811 1.748-1.687.077-2.193.093-6.465.093s-4.778-.016-6.465-.093c-1.821-.083-3.511-.448-4.811-1.748-1.3-1.3-1.665-2.99-1.748-4.811-.077-1.687-.093-2.193-.093-6.465s.016-4.778.093-6.465c.083-1.821.448-3.511 1.748-4.811 1.3-1.3 2.99-1.665 4.811-1.748 1.687-.077 2.193-.093 6.465-.093M16 0c-4.345 0-4.89.018-6.597.096-2.6.119-4.884.756-6.718 2.589C.852 4.518.215 6.802.096 9.403.018 11.11 0 11.655 0 16c0 4.345.018 4.89.096 6.597.119 2.6.756 4.884 2.589 6.718 1.833 1.833 4.117 2.47 6.718 2.589C11.11 31.982 11.655 32 16 32s4.89-.018 6.597-.096c2.6-.119 4.884-.756 6.718-2.589 1.833-1.833 2.47-4.117 2.589-6.718C31.982 20.89 32 20.345 32 16s-.018-4.89-.096-6.597c-.119-2.6-.756-4.884-2.589-6.718C27.482.852 25.198.215 22.597.096 20.89.018 20.345 0 16 0z"></path><path d="M16 7.784a8.216 8.216 0 1 0 0 16.432 8.216 8.216 0 0 0 0-16.432zm0 13.549a5.333 5.333 0 1 1 0-10.666 5.333 5.333 0 0 1 0 10.666z"></path><circle cx="24.541" cy="7.459" r="1.92"></circle></g></svg></a></div><p class="_24f5vT">© 2019 Topcoder. All Rights Reserved</p></div></div></div></div><div></div><span class="redux-toastr" aria-live="assertive"><span><div class="top-left"></div><div class="top-right"></div><div class="top-center"></div><div class="bottom-left"></div><div class="bottom-right"></div><div class="bottom-center"></div></span></span></div></div>
            
            <script async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/analytics.js"></script><script type="text/javascript" async="" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/analytics.min.js"></script><script src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/polyfills-1556278029512.js" type="application/javascript"></script>
            <script type="application/javascript">
  if('serviceWorker' in navigator){
    navigator.serviceWorker.register('/challenges/sw.js', {scope: '/challenges'}).then(
    (reg)=>{
      console.log('SW registered: ',reg);
      reg.onupdatefound = () => {
        const installingWorker = reg.installing;
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'activated') {
            location.reload();
          }
        };
      };
    }).catch((err)=>{console.log('SW registration failed: ',err)})
  }
  </script><script src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/loading-indicator-animation-1556278029512.js" type="application/javascript"></script><script>
    !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="4.0.0";
    analytics.load("WEjBoGYCPGzGrNDmf7V4eQsMOsJroeyr");
    }}();
  </script><script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-6340959-1', 'auto');
    ga('send', 'pageview');
  </script><!-- Start of topcoder Zendesk Widget script -->
  <iframe src="javascript:false" title="" style="display: none;" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/saved_resource.html"></iframe><script>/*<![CDATA[*/window.zEmbed||function(e,t){var n,o,d,i,s,a=[],r=document.createElement("iframe");window.zEmbed=function(){a.push(arguments)},window.zE=window.zE||window.zEmbed,r.src="javascript:false",r.title="",r.role="presentation",(r.frameElement||r).style.cssText="display: none",d=document.getElementsByTagName("script"),d=d[d.length-1],d.parentNode.insertBefore(r,d),i=r.contentWindow,s=i.document;try{o=s}catch(e){n=document.domain,r.src='javascript:var d=document.open();d.domain="'+n+'";void(0);',o=s}o.open()._l=function(){var e=this.createElement("script");n&&(this.domain=n),e.id="js-iframe-async",e.src="https://assets.zendesk.com/embeddable_framework/main.js",this.t=+new Date,this.zendeskHost="topcoder.zendesk.com",this.zEQueue=a,this.body.appendChild(e)},o.write('<body onload="document._l();">'),o.close()}();
  /*]]>*/</script>
  <!-- End of topcoder Zendesk Widget script -->
            <script src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/main-1556278029512.js" type="application/javascript"></script><iframe id="tc-accounts-iframe" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/connector.html" width="0" height="0"></iframe>
          
        <iframe name="_hjRemoteVarsFrame" title="_hjRemoteVarsFrame" id="_hjRemoteVarsFrame" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;"></iframe><div id="chmln-dom" style="position: static;"><div id="chmln" data-powered-by="https://trychameleon.com/how"></div><style id="chmln-stylesheet" type="text/css">#chmln *{font-family:Helvetica,Arial,sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;margin:0;padding:0;border:0;outline:0;font-size:100%;vertical-align:baseline;background:transparent;font-weight:inherit}#chmln article,#chmln aside,#chmln details,#chmln figcaption,#chmln figure,#chmln footer,#chmln header,#chmln hgroup,#chmln main,#chmln menu,#chmln nav,#chmln section,#chmln summary{display:block}#chmln [flex],#chmln div,#chmln input,#chmln label,#chmln main,#chmln section,#chmln select{position:static;display:block;-webkit-box-flex:initial;-ms-flex:initial;flex:initial;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;height:auto;width:auto}#chmln audio,#chmln canvas,#chmln progress,#chmln video{display:inline-block;vertical-align:baseline}#chmln audio:not([controls]){display:none;height:0}#chmln [hidden],#chmln template{display:none}#chmln a{background-color:transparent}#chmln a:active,#chmln a:hover{outline:0}#chmln abbr[title]{border-bottom:1px dotted}#chmln b,#chmln strong{font-weight:bold}#chmln dfn{font-style:italic}#chmln h1{font-size:2em;padding:10px 0}#chmln h2{font-size:1.5em;padding:8px 0}#chmln h3{font-size:1.33em;padding:6px 0}#chmln h4{font-size:1.17em;padding:4px 0}#chmln h5{font-size:0.83em;padding:2px 0}#chmln h6{font-size:0.67em}#chmln h1,#chmln h2,#chmln h3,#chmln h4,#chmln h5,#chmln h6{line-height:1.6em;text-shadow:inherit;text-decoration:none;box-shadow:none;color:inherit}#chmln mark{background:#ff0;color:#000}#chmln small{font-size:80%}#chmln sub,#chmln sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}#chmln sup{top:-0.5em}#chmln sub{bottom:-0.25em}#chmln img{border:0}#chmln svg:not(:root){overflow:hidden}#chmln figure{margin:1em 40px}#chmln hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}#chmln pre{overflow:auto}#chmln code,#chmln kbd,#chmln pre,#chmln samp{font-family:monospace,monospace;font-size:1em}#chmln button,#chmln input,#chmln optgroup,#chmln select,#chmln textarea{color:inherit;font:inherit;margin:0;height:auto;width:auto}#chmln button{overflow:visible}#chmln button,#chmln select{text-transform:none}#chmln button,#chmln html input[type="button"],#chmln input[type="reset"],#chmln input[type="submit"]{-webkit-appearance:button;cursor:pointer}#chmln button[disabled],#chmln html input[disabled]{cursor:default}#chmln button::-moz-focus-inner,#chmln input::-moz-focus-inner{border:0;padding:0}#chmln input{line-height:normal}#chmln input[type="checkbox"],#chmln input[type="radio"]{box-sizing:border-box;padding:0}#chmln input[type="number"]::-webkit-inner-spin-button,#chmln input[type="number"]::-webkit-outer-spin-button{height:auto}#chmln input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}#chmln input[type="search"]::-webkit-search-cancel-button,#chmln input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}#chmln fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}#chmln legend{border:0;padding:0}#chmln textarea{overflow:auto;height:auto;width:auto}#chmln optgroup{font-weight:bold}#chmln table{border-collapse:collapse;border-spacing:0}#chmln td,#chmln th{padding:0}#chmln ul,#chmln ul li{list-style-type:disc}#chmln ol,#chmln ol li{list-style-type:decimal}#chmln ul ul,#chmln ol ul{list-style-type:circle;margin-left:15px}#chmln ol ol,#chmln ul ol{list-style-type:lower-latin;margin-left:15px}#chmln .chmln-edit-modal .chmln-step-positioning-container{display:-ms-flexbox;display:flex;position:fixed;z-index:2147483647}#chmln .chmln-edit-modal .chmln-inner .chmln-body{font-size:100%;line-height:100%;word-wrap:break-word;color:#283554;font-family:Helvetica,Arial,sans-serif;padding:16px 24px 0 24px;overflow-y:auto;max-height:8.75em}#chmln .chmln-edit-modal .chmln-inner .chmln-body p,#chmln .chmln-edit-modal .chmln-inner .chmln-body a,#chmln .chmln-edit-modal .chmln-inner .chmln-body strong,#chmln .chmln-edit-modal .chmln-inner .chmln-body em,#chmln .chmln-edit-modal .chmln-inner .chmln-body h1,#chmln .chmln-edit-modal .chmln-inner .chmln-body h2,#chmln .chmln-edit-modal .chmln-inner .chmln-body h3,#chmln .chmln-edit-modal .chmln-inner .chmln-body h4,#chmln .chmln-edit-modal .chmln-inner .chmln-body h5,#chmln .chmln-edit-modal .chmln-inner .chmln-body h6{font-family:inherit;color:inherit;letter-spacing:inherit}#chmln .chmln-edit-modal .chmln-inner .chmln-body ul,#chmln .chmln-edit-modal .chmln-inner .chmln-body ol{margin-left:1em;padding-left:1em}#chmln .chmln-edit-modal .chmln-inner .chmln-body a{text-decoration:underline}#chmln .chmln-edit-modal .chmln-inner .chmln-close svg.chmln-close-icon{color:#515E7D;border:none;height:0.8333em;width:0.8333em;margin-left:1.16em;background-size:cover}@keyframes drop-pulse{0%{-webkit-transform:scale(0.5);-moz-transform:scale(0.5);transform:scale(0.5);-webkit-box-shadow:0 0 0 0px #fff;-moz-box-shadow:0 0 0 0px #fff;box-shadow:0 0 0 0px #fff}50%{-webkit-transform:scale(1);-moz-transform:scale(1);transform:scale(1);-webkit-box-shadow:0 0 0 4px rgba(104,154,203,0);-moz-box-shadow:0 0 0 4px rgba(104,154,203,0);box-shadow:0 0 0 4px rgba(104,154,203,0)}100%{-webkit-transform:scale(0.5);-moz-transform:scale(0.5);transform:scale(0.5);-webkit-box-shadow:0 0 0 0px rgba(255,255,255,0);-moz-box-shadow:0 0 0 0px rgba(255,255,255,0);box-shadow:0 0 0 0px rgba(255,255,255,0)}}#chmln ::-webkit-scrollbar{width:12px;height:18px}#chmln ::-webkit-scrollbar-thumb{height:6px;border:3px solid transparent;background-clip:padding-box;-webkit-border-radius:7px;background-color:rgba(0,0,0,0.15)}#chmln ::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,0.2)}#chmln .chmln-launcher-body{-ms-overflow-style:none;overflow:-moz-scrollbars-none}#chmln .chmln-launcher-body::-webkit-scrollbar{display:none;width:0 !important}#chmln .chmln-edit-modal.chmln-branding-position-bottom_right .chmln-branding-positioning-container{justify-content:flex-end;align-items:flex-end}#chmln .chmln-edit-modal.chmln-branding-position-bottom_left .chmln-branding-positioning-container{justify-content:flex-start;align-items:flex-end}#chmln .chmln-edit-modal.chmln-branding-position-top_right .chmln-branding-positioning-container{justify-content:flex-end;align-items:flex-start}#chmln .chmln-edit-modal.chmln-branding-position-top_left .chmln-branding-positioning-container{justify-content:flex-start;align-items:flex-start}#chmln .chmln-edit-modal .chmln-branding-positioning-container{display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;top:0;right:0;left:0;bottom:0;position:fixed;padding:10px 15px 10px 10px;pointer-events:none;z-index:2147482643}#chmln .chmln-edit-modal .chmln-branding{display:flex;align-items:center;background-color:#FFF;padding:5px 16px;opacity:0.5;border-radius:7px;box-shadow:0 0 3px rgba(87,70,95,0.5);pointer-events:auto;cursor:pointer;transition-property:opacity;transition-duration:200ms}#chmln .chmln-edit-modal .chmln-branding,#chmln .chmln-edit-modal .chmln-branding div{font-size:16px}#chmln .chmln-edit-modal .chmln-branding,#chmln .chmln-edit-modal .chmln-branding:hover,#chmln .chmln-edit-modal .chmln-branding:visited,#chmln .chmln-edit-modal .chmln-branding:active{text-decoration:none;color:#57465f}#chmln .chmln-edit-modal .chmln-branding:hover{opacity:1.0}#chmln .chmln-edit-modal .chmln-branding .chmln-branding-icon{width:12px;height:18px;display:block;margin-left:12px}#chmln .chmln-edit-modal .chmln-branding .chmln-branding-icon svg{width:100%;height:auto}#chmln .chmln-edit-modal .chmln-branding .chmln-branding-icon svg path{fill:#81c261}#chmln{font-family:Helvetica,Arial,sans-serif !important;font-size:13px !important;line-height:1.6em !important;letter-spacing:normal !important;position:static !important}#chmln div{position:static}.chmln-hidden{display:none !important}#chmln-dom #chmln-step-preview-element{display:none;position:absolute;left:30px;width:120px;height:30px;border:2px dashed #86ba58;border-radius:0;font-style:italic;background-color:rgba(255,255,255,0.8);color:#86ba58;align-items:center;justify-content:center}#chmln-dom #chmln-step-preview-element.chmln-step-preview-visible{display:flex}#chmln-dom .chmln-list-preview-container{position:fixed;top:0;bottom:0;left:590px;right:0;display:flex;align-items:center;justify-content:center;pointer-events:none;z-index:2147483647}#chmln-dom .chmln-list-preview-container #chmln-step-preview-element{left:auto}#chmln-dom .chmln-step-preview-container{position:fixed;top:0;bottom:0;left:590px;right:0;display:flex;align-items:center;justify-content:center;pointer-events:none;z-index:2147482643}#chmln-dom .chmln-step-preview-container.chmln-step-preview-top{top:100px;left:0}#chmln-dom .chmln-step-preview-container.chmln-step-preview-top #chmln-step-preview-element{left:30%}#chmln-dom .chmln-step-preview-container .chmln-step-preview-container-left,#chmln-dom .chmln-step-preview-container .chmln-step-preview-container-right{position:relative;height:100%;flex-grow:1;flex-basis:0;display:flex}#chmln-dom .chmln-step-preview-container .chmln-step-preview-container-left{z-index:1}#chmln-dom .chmln-step-preview-container .chmln-step-preview-container-right{z-index:2;flex-direction:column;justify-content:center}#chmln-dom .chmln-step-preview-container .chmln-step-preview-container-top,#chmln-dom .chmln-step-preview-container .chmln-step-preview-container-bottom{position:relative;flex-grow:1;flex-basis:0;width:100%}#chmln-dom .chmln-step-preview-container .chmln-step-preview-container-bottom #chmln-step-preview-element{z-index:2147482643}#chmln-dom .chmln-step-preview-container #chmln-step-sample .chmln-step-positioning-container,#chmln-dom .chmln-step-preview-container #chmln-step-sample2 .chmln-step-positioning-container,#chmln-dom .chmln-step-preview-container #chmln-step-sample3 .chmln-step-positioning-container{position:absolute;left:0}#chmln-dom .chmln-step-preview-container #chmln-step-sample .chmln-highlight{position:fixed;left:590px}#chmln-dom .chmln-step-preview-container #chmln-step-sample .chmln-inner{left:10%}#chmln img.chmln-emojify{width:1.5em;height:1.5em;display:inline-block;margin-top:-0.1em;margin-bottom:-0.4em;background-size:contain}#chmln .chmln-cta{display:flex;justify-content:space-between;flex-direction:row-reverse;align-items:center}#chmln .chmln-cta div{order:2}#chmln .chmln-hero{padding:34px 1em 0 1em !important}#chmln .chmln-hero button{margin:0 auto;display:flex;padding:0.65em 1.55em !important;font-size:1.5em !important;line-height:1.75em !important}#chmln .chmln-lightbox-highlight{display:none;position:fixed;top:0;bottom:0;left:0;right:0;pointer-events:none;background:transparent;z-index:2147482642}#chmln .chmln-lightbox-highlight.chmln-lightbox-highlight-no-click .chmln-lightbox-row:nth-of-type(2) .chmln-lightbox-cell:nth-of-type(2){pointer-events:auto}#chmln .chmln-lightbox-highlight .chmln-lightbox-row{display:flex;justify-content:space-between}#chmln .chmln-lightbox-highlight .chmln-lightbox-row .chmln-lightbox-cell{flex-grow:1;pointer-events:auto;height:inherit}#chmln .chmln-lightbox-highlight .chmln-lightbox-row.chmln-lightbox-opening-row .chmln-lightbox-cell{flex-grow:0;flex-shrink:0}#chmln .chmln-lightbox-highlight .chmln-lightbox-row.chmln-lightbox-opening-row .chmln-lightbox-cell:nth-of-type(3){flex-grow:1;flex-shrink:1}#chmln .chmln-lightbox-highlight .chmln-lightbox-row.chmln-lightbox-opening-row .chmln-lightbox-cell.chmln-lightbox-opening{pointer-events:none;border-radius:5px;background-color:transparent}#chmln .chmln-hotspot-highlight,#chmln .chmln-hotspot-trigger{position:absolute;top:-5000em;left:-5000em;cursor:pointer;overflow:visible;z-index:2147482642;pointer-events:auto;min-height:2px;min-width:2px}#chmln .chmln-hotspot-highlight svg,#chmln .chmln-hotspot-trigger svg{overflow:visible}#chmln .chmln-hotspot-image[src$='.svg']{min-height:17px;min-width:17px}#chmln .chmln-hotspot-trigger-label_new svg,#chmln .chmln-hotspot-trigger-label_beta svg,#chmln .chmln-hotspot-trigger-label_update svg,#chmln .chmln-hotspot-trigger-label_upgrade svg{height:18px}#chmln .chmln-hotspot-trigger-icon_add svg,#chmln .chmln-hotspot-trigger-icon_alert svg,#chmln .chmln-hotspot-trigger-icon_notification svg,#chmln .chmln-hotspot-trigger-icon_help svg,#chmln .chmln-hotspot-trigger-icon_info svg,#chmln .chmln-hotspot-trigger-iconmore svg,#chmln .chmln-hotspot-trigger-icon_pin svg,#chmln .chmln-hotspot-trigger-icon_more svg{height:30px}#chmln .chmln-hotspot-trigger-icon_badge svg{height:12px}#chmln .chmln-hotspot-spot{content:" ";background:#86ba58;border-color:#86ba58;-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;border-radius:50%;width:20px;height:20px;animation:drop-pulse 1.2s infinite}#chmln .chmln-hotspot-spot:before{content:' ';border-width:2px;border-style:solid;border-color:inherit;position:absolute;left:-4px;top:-4px;right:-4px;bottom:-4px;-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;border-radius:50%;opacity:0.75}@media (min-width: 600px){#chmln>.chmln-modal .chmln-inner{margin:100px}}#chmln .chmln-edit-modal .chmln-step-positioning-container{-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;top:0;right:0;left:0;bottom:0;position:absolute;padding:20px 35px 20px 20px}#chmln .chmln-edit-modal.chmln-is-editing.chmln-top-bar-closed .chmln-step-positioning-container{left:590px}#chmln .chmln-edit-modal.chmln-full-width .chmln-step-positioning-container{padding:0}#chmln .chmln-edit-modal.chmln-modal-trigger-element_match:not(.chmln-partially-triggered){display:none}#chmln .chmln-edit-modal:not(.chmln-highlight) .chmln-step-positioning-container{pointer-events:none}#chmln .chmln-edit-modal.chmln-has-trigger:not(.chmln-triggered) .chmln-step-positioning-container{pointer-events:none}#chmln .chmln-edit-modal.chmln-has-trigger:not(.chmln-triggered) .chmln-inner,#chmln .chmln-edit-modal.chmln-has-trigger:not(.chmln-triggered) .chmln-hotspot-highlight,#chmln .chmln-edit-modal.chmln-has-trigger:not(.chmln-triggered) .chmln-lightbox-highlight{display:none}#chmln .chmln-edit-modal.chmln-modal-has-cover.chmln-dismiss-position-inside_left .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-modal-has-cover.chmln-dismiss-position-inside_right .chmln-inner .chmln-close{top:18px;z-index:3;margin:0}#chmln .chmln-edit-modal.chmln-modal-has-cover.chmln-dismiss-position-inside_right .chmln-inner .chmln-close{right:18px;left:auto}#chmln .chmln-edit-modal.chmln-modal-has-cover.chmln-dismiss-position-inside_left .chmln-inner .chmln-close{left:18px;right:auto}#chmln .chmln-edit-modal.chmln-dismiss-position-inside_left .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-inside_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-center_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-center_left .chmln-inner .chmln-close{background:transparent;padding:0;box-shadow:none}#chmln .chmln-edit-modal.chmln-dismiss-position-inside_left .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-inside_left .chmln-inner .chmln-close.chmln-close-text,#chmln .chmln-edit-modal.chmln-dismiss-position-inside_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-inside_right .chmln-inner .chmln-close.chmln-close-text,#chmln .chmln-edit-modal.chmln-dismiss-position-center_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-center_right .chmln-inner .chmln-close.chmln-close-text,#chmln .chmln-edit-modal.chmln-dismiss-position-center_left .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-center_left .chmln-inner .chmln-close.chmln-close-text{opacity:1}#chmln .chmln-edit-modal.chmln-dismiss-position-center_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-center_left .chmln-inner .chmln-close{position:static}#chmln .chmln-edit-modal.chmln-dismiss-position-center_left .chmln-inner .chmln-close{order:-1}#chmln .chmln-edit-modal.chmln-dismiss-position-inside_left.chmln-has-dismiss:not(.chmln-modal-has-cover) .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-inside_right.chmln-has-dismiss:not(.chmln-modal-has-cover) .chmln-inner .chmln-close{position:static}#chmln .chmln-edit-modal.chmln-dismiss-position-inside_left.chmln-has-dismiss:not(.chmln-modal-has-cover) .chmln-inner .chmln-header,#chmln .chmln-edit-modal.chmln-dismiss-position-inside_right.chmln-has-dismiss:not(.chmln-modal-has-cover) .chmln-inner .chmln-header{width:auto;align-items:flex-start;box-sizing:border-box;padding:18px 0 0 0;background:transparent}#chmln .chmln-edit-modal.chmln-dismiss-position-inside_left.chmln-has-dismiss:not(.chmln-modal-has-cover):not(.chmln-floating-dismiss) .chmln-inner .chmln-body-container,#chmln .chmln-edit-modal.chmln-dismiss-position-inside_right.chmln-has-dismiss:not(.chmln-modal-has-cover):not(.chmln-floating-dismiss) .chmln-inner .chmln-body-container{margin-top:4px}#chmln .chmln-edit-modal.chmln-dismiss-position-inside_left.chmln-has-dismiss:not(.chmln-modal-has-cover) .chmln-inner .chmln-header{justify-content:flex-start;padding-left:18px;padding-right:0}#chmln .chmln-edit-modal.chmln-dismiss-position-inside_right.chmln-has-dismiss:not(.chmln-modal-has-cover) .chmln-inner .chmln-header{justify-content:flex-end;padding-left:0;padding-right:18px}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_left .chmln-inner .chmln-header,#chmln .chmln-edit-modal.chmln-dismiss-position-outside_right .chmln-inner .chmln-header{padding:0}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_left .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-dismiss-position-outside_right .chmln-inner .chmln-close{box-shadow:0 0 6px rgba(0,0,0,0.3);opacity:0.5;transition-property:opacity;transition-duration:200ms;min-width:30px}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_left .chmln-inner .chmln-close:hover,#chmln .chmln-edit-modal.chmln-dismiss-position-outside_right .chmln-inner .chmln-close:hover{opacity:1}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_left .chmln-inner .chmln-close.chmln-close-text,#chmln .chmln-edit-modal.chmln-dismiss-position-outside_right .chmln-inner .chmln-close.chmln-close-text{padding:6px 8px;min-width:0px}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_left .chmln-inner .chmln-close.chmln-close-text.chmln-edit-close,#chmln .chmln-edit-modal.chmln-dismiss-position-outside_right .chmln-inner .chmln-close.chmln-close-text.chmln-edit-close{padding:0}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_left .chmln-inner .chmln-close.chmln-close-text.chmln-edit-close input,#chmln .chmln-edit-modal.chmln-dismiss-position-outside_right .chmln-inner .chmln-close.chmln-close-text.chmln-edit-close input{padding:6px 8px}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_left .chmln-inner .chmln-close{right:100%;right:calc(100% + 5px);left:auto}#chmln .chmln-edit-modal.chmln-dismiss-position-outside_right .chmln-inner .chmln-close{left:100%;left:calc(100% + 5px);right:auto}#chmln .chmln-edit-modal:not(.chmln-modal-has-body).chmln-modal-has-region-center_right .chmln-cta-region.chmln-cta-center_right{flex-grow:1}#chmln .chmln-edit-modal:not(.chmln-modal-has-body):not(.chmln-modal-has-region-center_left):not(.chmln-modal-has-region-center_right) .chmln-body-container{margin:0}#chmln .chmln-edit-modal:not(.chmln-modal-has-body):not(.chmln-modal-has-region-center_left):not(.chmln-modal-has-region-center_right).chmln-modal-has-region-bottom_left .chmln-footer,#chmln .chmln-edit-modal:not(.chmln-modal-has-body):not(.chmln-modal-has-region-center_left):not(.chmln-modal-has-region-center_right).chmln-modal-has-region-bottom_right .chmln-footer,#chmln .chmln-edit-modal:not(.chmln-modal-has-body):not(.chmln-modal-has-region-center_left):not(.chmln-modal-has-region-center_right).chmln-modal-has-region-bottom_center .chmln-footer{margin-top:18px}#chmln .chmln-edit-modal.chmln-tooltip-step .chmln-body-container{margin:8px 12px}#chmln .chmln-edit-modal.chmln-tooltip-step .chmln-pointer-highlight{height:12px;width:12px}#chmln .chmln-edit-modal.chmln-modal-has-body.chmln-floating-dismiss.chmln-dismiss-type-button:not(.chmln-modal-has-cover).chmln-dismiss-position-inside_left .chmln-close,#chmln .chmln-edit-modal.chmln-modal-has-body.chmln-floating-dismiss.chmln-dismiss-type-button:not(.chmln-modal-has-cover).chmln-dismiss-position-inside_right .chmln-close{margin:0;padding:5px}#chmln .chmln-edit-modal.chmln-modal-has-body.chmln-floating-dismiss.chmln-dismiss-type-button:not(.chmln-modal-has-cover).chmln-dismiss-position-inside_left.chmln-dismiss-position-inside_left .chmln-close,#chmln .chmln-edit-modal.chmln-modal-has-body.chmln-floating-dismiss.chmln-dismiss-type-button:not(.chmln-modal-has-cover).chmln-dismiss-position-inside_right.chmln-dismiss-position-inside_left .chmln-close{float:left;padding-left:0;padding-right:10px}#chmln .chmln-edit-modal.chmln-modal-has-body.chmln-floating-dismiss.chmln-dismiss-type-button:not(.chmln-modal-has-cover).chmln-dismiss-position-inside_left.chmln-dismiss-position-inside_right .chmln-close,#chmln .chmln-edit-modal.chmln-modal-has-body.chmln-floating-dismiss.chmln-dismiss-type-button:not(.chmln-modal-has-cover).chmln-dismiss-position-inside_right.chmln-dismiss-position-inside_right .chmln-close{float:right;padding-right:0;padding-left:10px}#chmln .chmln-edit-modal.chmln-modal-has-body .chmln-inner .chmln-iframe-container{margin-top:0}#chmln .chmln-edit-modal.chmln-modal-has-body .chmln-inner .chmln-footer .chmln-progress,#chmln .chmln-edit-modal.chmln-modal-has-body .chmln-inner .chmln-footer .chmln-action{margin-top:0}#chmln .chmln-edit-modal.chmln-progress-type-text .chmln-inner .chmln-progress{border-radius:0}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen .chmln-step-positioning-container{position:fixed;pointer-events:none}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-top-bar-open .chmln-inner{max-height:calc($max-step-height - $top-bar-height)}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-top-bar-open .chmln-step-positioning-container,#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-top-bar-open .chmln-enter-animation-canvas-container{padding-top:120px}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-top-bar-open.chmln-full-width .chmln-step-positioning-container,#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-top-bar-open.chmln-full-width .chmln-enter-animation-canvas-container{padding-top:100px}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-top_left .chmln-step-positioning-container{justify-content:flex-start;align-items:flex-start}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-top_right .chmln-step-positioning-container{justify-content:flex-end;align-items:flex-start}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-top_center .chmln-step-positioning-container{justify-content:center;align-items:flex-start}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-left_center .chmln-step-positioning-container{justify-content:flex-start;align-items:center}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-right_center .chmln-step-positioning-container{justify-content:flex-end;align-items:center}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-bottom_left .chmln-step-positioning-container{justify-content:flex-start;align-items:flex-end}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-bottom_right .chmln-step-positioning-container{justify-content:flex-end;align-items:flex-end}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-bottom_center .chmln-step-positioning-container{justify-content:center;align-items:flex-end}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-center .chmln-step-positioning-container{justify-content:center;align-items:center}#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-top_right.chmln-dismiss-position-outside_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-modal-positioning-relative_to_screen.chmln-modal-position-bottom_right.chmln-dismiss-position-outside_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-modal-positioning-snap_to_element.chmln-positioned-left.chmln-dismiss-position-outside_right .chmln-inner .chmln-close,#chmln .chmln-edit-modal.chmln-modal-positioning-snap_to_trigger.chmln-positioned-left.chmln-dismiss-position-outside_right .chmln-inner .chmln-close{left:100%;left:calc(100% + 5px);right:auto}#chmln .chmln-edit-modal.chmln-modal-positioning-snap_to_element .chmln-step-positioning-container,#chmln .chmln-edit-modal.chmln-modal-positioning-snap_to_trigger .chmln-step-positioning-container{pointer-events:none;right:auto;bottom:auto;width:0;height:0;overflow:visible;position:static;padding:0}#chmln .chmln-edit-modal.chmln-modal-positioning-snap_to_element .chmln-inner,#chmln .chmln-edit-modal.chmln-modal-positioning-snap_to_trigger .chmln-inner{left:-5000vh;top:-5000vw;pointer-events:auto}#chmln .chmln-edit-modal .chmln-enter-animation-canvas-container{position:fixed;background:transparent;top:0;left:0;right:0;bottom:0;z-index:2147482643;pointer-events:none}#chmln .chmln-edit-modal .chmln-enter-animation-canvas{position:fixed;top:0;left:0;height:100%;width:100%}#chmln .chmln-edit-modal .chmln-inner{position:relative;display:block;max-width:100vw;max-height:87vh;z-index:2147482643;font-size:15px;pointer-events:auto;box-shadow:0 0 6px rgba(0,0,0,0.3)}#chmln .chmln-edit-modal .chmln-inner .chmln-inner-edit-overlay{position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:none;background:transparent}#chmln .chmln-edit-modal .chmln-inner>.chmln-header{width:100%;display:flex;align-items:center;justify-content:flex-end;padding:0 3px 0 0;overflow:visible;position:relative}#chmln .chmln-edit-modal .chmln-inner .chmln-progress{padding:0;margin:0 0 0 18px;display:flex;align-items:center;flex-wrap:nowrap;border-radius:13px;font-size:13px;order:0}#chmln .chmln-edit-modal .chmln-inner .chmln-progress.chmln-edit-placeholder .chmln-progress-dot,#chmln .chmln-edit-modal .chmln-inner .chmln-progress.chmln-edit-placeholder .chmln-progress-dot.chmln-progress-dot-active{background-color:#F9F6FA}#chmln .chmln-edit-modal .chmln-inner .chmln-progress .chmln-progress-dot{border-radius:50%;background-color:#E2DDE5;margin:2px;width:10px;height:10px}#chmln .chmln-edit-modal .chmln-inner .chmln-progress .chmln-progress-dot.chmln-progress-dot-active{background-color:#56455C}#chmln .chmln-edit-modal .chmln-inner .chmln-progress .chmln-progress-text{color:#515E7D;white-space:nowrap}#chmln .chmln-edit-modal .chmln-inner>.chmln-media-body{flex-grow:1;overflow:hidden}#chmln .chmln-edit-modal .chmln-inner>.chmln-media-body>.chmln-step-media{text-align:center;max-height:100%;position:relative;overflow:hidden}#chmln .chmln-edit-modal .chmln-inner>.chmln-media-body>.chmln-step-media.chmln-step-media-video{background:#000000}#chmln .chmln-edit-modal .chmln-inner>.chmln-media-body>.chmln-step-media>.chmln-video{height:100%;width:100%}#chmln .chmln-edit-modal .chmln-inner>.chmln-media-body>.chmln-step-media iframe{display:block;max-width:100%;margin:0 auto}#chmln .chmln-edit-modal .chmln-inner>.chmln-media-body>.chmln-step-media>.chmln-image{display:block;height:auto;width:100%;margin:auto;flex-shrink:0}#chmln .chmln-edit-modal .chmln-inner .chmln-body{flex-grow:1;font-size:1em;padding:0;margin:0;border-radius:0;overflow-y:auto;max-height:none;min-height:1em;position:relative}#chmln .chmln-edit-modal .chmln-inner .chmln-body h1,#chmln .chmln-edit-modal .chmln-inner .chmln-body h2,#chmln .chmln-edit-modal .chmln-inner .chmln-body h3,#chmln .chmln-edit-modal .chmln-inner .chmln-body h4,#chmln .chmln-edit-modal .chmln-inner .chmln-body h5{padding:0}#chmln .chmln-edit-modal .chmln-inner .chmln-body.chmln-body-editing{overflow-y:hidden}#chmln .chmln-edit-modal .chmln-inner .chmln-body.chmln-body-editing .chmln-body-content{visibility:hidden}#chmln .chmln-edit-modal .chmln-inner hr{height:1px;opacity:0.2}#chmln .chmln-edit-modal .chmln-inner blockquote{border-left:4px solid;margin:0.5em 10px;padding:0.5em 10px}#chmln .chmln-edit-modal .chmln-inner .chmln-close.chmln-close-text.chmln-edit-close{padding:0}#chmln .chmln-edit-modal .chmln-inner .chmln-close.chmln-close-text.chmln-edit-close input{background:transparent;border-radius:inherit;text-decoration:underline;line-height:1em;padding:3px}#chmln .chmln-edit-modal .chmln-inner .chmln-close{display:flex;align-items:center;justify-content:center;padding:8px;margin:3px 0;position:absolute;right:-40px;top:-3px;border-radius:50%}#chmln .chmln-edit-modal .chmln-inner .chmln-close.chmln-close-text{border-radius:4px;background:transparent;opacity:0.8;line-height:1em;padding:3px 4px}#chmln .chmln-edit-modal .chmln-inner .chmln-close.chmln-edit-placeholder .chmln-icon-fill{fill:#BAB5BD}#chmln .chmln-edit-modal .chmln-inner .chmln-close svg.chmln-close-icon{margin:0;width:14px;height:14px}#chmln .chmln-edit-modal .chmln-footer{flex-grow:1;display:flex;align-items:center;flex-wrap:wrap;padding:0;margin:0}#chmln .chmln-edit-modal .chmln-body-container{margin:18px;display:flex;align-items:center;justify-content:flex-start;flex-wrap:nowrap}#chmln .chmln-edit-modal .chmln-body-container .chmln-body{flex-grow:1}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-region{display:flex;align-items:center}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_right,#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_left{margin:0;flex-wrap:nowrap}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_right{justify-content:flex-end}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_right .chmln-close,#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_right .chmln-action{margin:0 0 0 18px}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_right .chmln-close:last-child,#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_right .chmln-action:last-child{margin-right:0}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_left{justify-content:flex-start}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_left .chmln-close,#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_left .chmln-action{margin:0 18px 0 0}#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_left .chmln-close:first-child,#chmln .chmln-edit-modal .chmln-body-container .chmln-cta-center_left .chmln-action:first-child{margin-left:0}#chmln .chmln-edit-modal .chmln-cta{flex-direction:row;justify-content:flex-end;flex-grow:1;flex-wrap:nowrap;align-items:center;padding:18px;padding-top:0}#chmln .chmln-edit-modal .chmln-cta .chmln-cta-region{flex-grow:1;flex-basis:0;display:flex;align-items:center}#chmln .chmln-edit-modal .chmln-cta .chmln-cta-region *:first-child{margin-left:0}#chmln .chmln-edit-modal .chmln-cta .chmln-cta-bottom_left{justify-content:flex-start}#chmln .chmln-edit-modal .chmln-cta .chmln-cta-bottom_center{justify-content:center}#chmln .chmln-edit-modal .chmln-cta .chmln-cta-bottom_right{justify-content:flex-end}#chmln .chmln-edit-modal .chmln-action{margin:0 0 0 18px;order:0;font-size:0.933334em;line-height:1.75em;padding:5px 9px 3px 9px;border:2px solid transparent;text-align:center;border-radius:3px;white-space:nowrap}#chmln .chmln-edit-modal.chmln-body-alignment-left .chmln-body,#chmln .chmln-edit-modal.chmln-body-alignment-left .chmln-edit-body{text-align:left}#chmln .chmln-edit-modal.chmln-body-alignment-right .chmln-body,#chmln .chmln-edit-modal.chmln-body-alignment-right .chmln-edit-body{text-align:right}#chmln .chmln-edit-modal.chmln-body-alignment-center .chmln-body,#chmln .chmln-edit-modal.chmln-body-alignment-center .chmln-edit-body{text-align:center}#chmln .chmln-edit-modal.chmln-modal-size-small .chmln-inner{width:160px}#chmln .chmln-edit-modal.chmln-modal-size-small .chmln-body{margin:10px}#chmln .chmln-edit-modal.chmln-modal-size-small .chmln-step-media iframe{width:160px;height:90px}#chmln .chmln-edit-modal.chmln-modal-size-medium .chmln-inner{width:370px}#chmln .chmln-edit-modal.chmln-modal-size-medium .chmln-step-media iframe{width:370px;height:208px}#chmln .chmln-edit-modal.chmln-modal-size-large .chmln-inner{width:1000px}#chmln .chmln-edit-modal.chmln-modal-size-large .chmln-step-media iframe{width:1000px;height:562px}#chmln .chmln-edit-modal .chmln-iframe-container{margin:18px}#chmln .chmln-edit-modal .chmln-iframe-container .chmln-iframe-embed{width:100%}#chmln .chmln-edit-modal .chmln-highlight{pointer-events:auto;position:absolute;top:0;bottom:0;left:0;right:0;z-index:2147482642}#chmln .chmln-edit-modal .chmln-pointer-highlight{position:absolute;height:16px;width:16px;border:0 none;margin:0;padding:0;background-color:white;z-index:-1}#chmln .chmln-edit-modal .chmln-pointer-highlight.chmln-pointer-side-left{box-shadow:-1px 1px 2px rgba(0,0,0,0.15);transform:translate(50%,0) rotate(45deg) skew(-10deg,-10deg);border-bottom-left-radius:3px}#chmln .chmln-edit-modal .chmln-pointer-highlight.chmln-pointer-side-right{box-shadow:1px -1px 2px rgba(0,0,0,0.15);transform:translate(-50%,0) rotate(45deg) skew(-10deg,-10deg);border-top-right-radius:3px}#chmln .chmln-edit-modal .chmln-pointer-highlight.chmln-pointer-side-top{box-shadow:-1px -1px 2px rgba(0,0,0,0.15);transform:translate(50%,50%) rotate(45deg) skew(10deg,10deg);border-top-left-radius:3px}#chmln .chmln-edit-modal .chmln-pointer-highlight.chmln-pointer-side-bottom{box-shadow:1px 1px 2px rgba(0,0,0,0.15);transform:translate(50%,-50%) rotate(45deg) skew(10deg,10deg);border-bottom-right-radius:3px}#chmln .chmln-edit-modal .chmln-pointer-highlight.chmln-pointer-side-none{display:none}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-top-editing-highlight,#chmln .chmln-edit-modal.chmln-edit-mode .chmln-top-editable-highlight:hover{box-shadow:0 0 0 2px #a364b7 !important}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-top-editable-highlight{cursor:pointer}#chmln .chmln-edit-modal.chmln-edit-mode input,#chmln .chmln-edit-modal.chmln-edit-mode textarea{box-shadow:inset 0 0 3px rgba(0,0,0,0.6)}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-inner{cursor:pointer}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-inner .chmln-edit-placeholder{color:#BAB5BD;cursor:pointer}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-inner .chmln-edit-placeholder.chmln-action-placeholder{text-decoration:underline;font-style:italic}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-iframe-container{position:relative}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-iframe-container .chmln-iframe-overlay{cursor:pointer;position:absolute;top:0;right:0;bottom:0;left:0;padding:0;margin:0}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-iframe-container.chmln-iframe-editing .chmln-iframe-embed{visibility:hidden}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-iframe-container.chmln-iframe-editing .chmln-iframe-overlay{pointer-events:none}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-iframe-container.chmln-iframe-editing [name="iframe_embed_code"]{position:absolute;top:0;right:0;bottom:0;left:0}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-action:not(.chmln-edit-action):hover{text-decoration:underline}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-action input{box-shadow:none;border:0 none;text-decoration:underline;height:1.75em}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-edit-body,#chmln .chmln-edit-modal.chmln-edit-mode .chmln-edit-embed{width:calc(100% - 4px);min-height:56px;margin:2px;box-sizing:border-box;padding:5px}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-step-media .chmln-step-media-edit-overlay{position:absolute;top:0;left:0;right:0;bottom:0;background:transparent;z-index:2}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-step-media .chmln-step-media-edit-overlay.chmln-top-editing-highlight,#chmln .chmln-edit-modal.chmln-edit-mode .chmln-step-media .chmln-step-media-edit-overlay.chmln-top-editable-highlight:hover{box-shadow:inset 0 0 0 2px #a364b7 !important}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-media-placeholder{color:#666;background-color:#FAF6FA;padding:30px;font-weight:bold;border:2px dashed #E3DCE6;display:flex;align-items:center;justify-content:center}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-media-placeholder svg{width:48px}#chmln .chmln-edit-modal.chmln-edit-mode .chmln-media-placeholder svg .chmln-icon-fill{fill:#E3DCE6}#chmln .chmln-list-container.chmln-edit-mode .chmln-editable{cursor:pointer;transition-property:background-color;transition-duration:200ms}#chmln .chmln-list-container.chmln-edit-mode .chmln-editable:hover,#chmln .chmln-list-container.chmln-edit-mode .chmln-editable.chmln-editable-highlight,#chmln .chmln-list-container.chmln-edit-mode .chmln-editable.chmln-editing-highlight{box-shadow:inset 0 0 0 2px #A364B7}#chmln .chmln-list-container.chmln-list-position-relative_to_screen.chmln-list-screen-position-bottom_left .chmln-list-trigger,#chmln .chmln-list-container.chmln-list-position-relative_to_screen.chmln-list-screen-position-bottom_left .chmln-list{left:20px}#chmln .chmln-list-container.chmln-list-position-relative_to_screen.chmln-list-screen-position-bottom_right .chmln-list-trigger,#chmln .chmln-list-container.chmln-list-position-relative_to_screen.chmln-list-screen-position-bottom_right .chmln-list{right:20px}#chmln .chmln-list-container.chmln-list-trigger-type-custom .chmln-list-trigger{height:auto;width:auto;background:transparent;box-shadow:none;border-radius:0}#chmln .chmln-list-container.chmln-list-trigger-type-custom .chmln-list-trigger .chmln-list-trigger-img{max-width:none;max-height:none}#chmln .chmln-list-container.chmln-list-trigger-type-text .chmln-list-trigger{width:auto;height:auto;padding:8px 16px;font-size:16px;font-weight:500}#chmln .chmln-list-trigger{cursor:pointer;position:fixed;z-index:2147483646;height:60px;width:60px;display:flex;align-items:center;justify-content:center;border-radius:30px;bottom:20px;overflow:hidden;-webkit-box-shadow:0 1px 10px 5px rgba(0,0,0,0.05);-moz-box-shadow:0 1px 10px 5px rgba(0,0,0,0.05);box-shadow:0 1px 10px 5px rgba(0,0,0,0.05)}#chmln .chmln-list-trigger.chmln-list-trigger-text{display:block}#chmln .chmln-list-trigger .chmln-list-trigger-icon-lightbulb{width:50px;height:50px;margin-top:8px;margin-left:6px}#chmln .chmln-list-trigger .chmln-list-trigger-icon-checklist{width:28px;height:28px;margin-top:0;margin-left:0}#chmln .chmln-list-trigger .chmln-list-trigger-icon-question{width:32px;height:32px;margin-top:0;margin-left:0}#chmln .chmln-list-trigger .chmln-list-trigger-icon-signpost{width:36px;height:36px;margin-top:0;margin-left:0}#chmln .chmln-list-trigger .chmln-list-trigger-icon-bell{width:30px;height:30px;margin-top:0;margin-left:0}#chmln .chmln-list-trigger .chmln-list-trigger-img{max-width:42px;max-height:42px}#chmln .chmln-list{position:fixed;bottom:100px;z-index:2147483647;width:300px;opacity:0;max-height:98vh;max-width:98vh;padding:20px;font-size:12px;pointer-events:none;-webkit-box-shadow:0 1px 10px 5px rgba(0,0,0,0.05);-moz-box-shadow:0 1px 10px 5px rgba(0,0,0,0.05);box-shadow:0 1px 10px 5px rgba(0,0,0,0.05);transition:all 0.2 ease-in-out;-moz-transition:all 0.2 ease-in-out;-webkit-transition:all 0.2 ease-in-out;-webkit-transform:scale(0.98) translateY(20px);-moz-transform:scale(0.98) translateY(20px);transform:scale(0.98) translateY(20px)}#chmln .chmln-list.chmln-fade-now{opacity:1;-webkit-transform:scale(1) translateY(0);-moz-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}#chmln .chmln-list.chmln-list-open{opacity:1;pointer-events:auto;-webkit-transform:scale(1) translateY(0);-moz-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}#chmln .chmln-list-top{box-sizing:border-box;padding:0;width:100%;margin-bottom:8px;display:flex;align-items:center;justify-content:space-between;flex-wrap:nowrap}#chmln .chmln-list-top .chmln-list-close{height:14px;width:14px;cursor:pointer;margin-left:10px;background:transparent;border:0 none;box-shadow:none}#chmln .chmln-list-top .chmln-list-close svg{max-height:100%;width:100%}#chmln .chmln-list-title-container{flex-grow:1;display:flex;align-items:center}#chmln textarea.chmln-list-title{overflow:hidden}#chmln .chmln-list-title{word-wrap:break-word;padding:0;width:100%;font-size:14px}#chmln .chmln-list-body{overflow-y:auto;overflow-x:hidden}#chmln .chmln-list-search{padding:0;width:100%;margin:5px 0;border:1px solid rgba(226,223,230,0.5);height:auto}#chmln .chmln-list-search input{width:100%;height:auto;padding:8px 5px;border-radius:3px;box-sizing:border-box}#chmln .chmln-list-search input::placeholder{opacity:0.7}#chmln .chmln-list-no-tours{padding:20px 10px 0 10px;text-align:center}#chmln ul.chmln-list-campaigns{list-style:none}#chmln ul.chmln-list-campaigns li.chmln-list-campaign{cursor:pointer;padding:5px 0 5px 0;list-style-type:none;display:flex;width:100%;transition-property:background-color;transition-duration:400ms}#chmln ul.chmln-list-campaigns li.chmln-list-campaign:last-of-type{padding-bottom:15px}#chmln ul.chmln-list-campaigns li.chmln-list-campaign .chmln-list-checkmark{margin-right:0.4em;height:1.0em;width:1.0em;flex-shrink:0}#chmln ul.chmln-list-campaigns li.chmln-list-campaign .chmln-list-checkmark svg{height:100%;max-width:100%}#chmln ul.chmln-list-campaigns li.chmln-list-campaign .chmln-list-campaign-title{display:flex;align-items:center;justify-content:flex-start;padding:2px 0 6px 0}#chmln ul.chmln-list-campaigns li.chmln-list-campaign .chmln-list-campaign-title,#chmln ul.chmln-list-campaigns li.chmln-list-campaign .chmln-list-campaign-title div{font-size:12px;font-weight:600;line-height:initial !important}#chmln ul.chmln-list-campaigns li.chmln-list-campaign .chmln-list-campaign-description{font-size:9px;line-height:16px;font-weight:500}#chmln ul.chmln-list-campaigns li.chmln-list-campaign:hover{background-color:rgba(0,0,0,0.02)}@-webkit-keyframes chmln-pulse{from{-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}50%{-webkit-transform:scale3d(1.05,1.05,1.05);transform:scale3d(1.05,1.05,1.05)}to{-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}@keyframes chmln-pulse{from{-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}50%{-webkit-transform:scale3d(1.05,1.05,1.05);transform:scale3d(1.05,1.05,1.05)}to{-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}.chmln-pulse{-webkit-animation-name:chmln-pulse;animation-name:chmln-pulse}@-webkit-keyframes chmln-shake{from,to{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}10%,30%,50%,70%,90%{-webkit-transform:translate3d(-10px,0,0);transform:translate3d(-10px,0,0)}20%,40%,60%,80%{-webkit-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0)}}@keyframes chmln-shake{from,to{-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}10%,30%,50%,70%,90%{-webkit-transform:translate3d(-10px,0,0);transform:translate3d(-10px,0,0)}20%,40%,60%,80%{-webkit-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0)}}.chmln-shake{-webkit-animation-name:chmln-shake;animation-name:chmln-shake}@-webkit-keyframes chmln-fade_in{from{opacity:0}to{opacity:1}}@keyframes chmln-fade_in{from{opacity:0}to{opacity:1}}.chmln-fade_in{-webkit-animation-name:chmln-fade_in;animation-name:chmln-fade_in}@-webkit-keyframes chmln-fade_in_down{from{opacity:0;-webkit-transform:translate3d(0,-33%,0);transform:translate3d(0,-33%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes chmln-fade_in_down{from{opacity:0;-webkit-transform:translate3d(0,-33%,0);transform:translate3d(0,-33%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.chmln-fade_in_down{-webkit-animation-name:chmln-fade_in_down;animation-name:chmln-fade_in_down}@-webkit-keyframes chmln-fade_in_left{from{opacity:0;-webkit-transform:translate3d(-33%,0,0);transform:translate3d(-33%,0,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes chmln-fade_in_left{from{opacity:0;-webkit-transform:translate3d(-33%,0,0);transform:translate3d(-33%,0,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.chmln-fade_in_left{-webkit-animation-name:chmln-fade_in_left;animation-name:chmln-fade_in_left}@-webkit-keyframes chmln-fade_in_right{from{opacity:0;-webkit-transform:translate3d(33%,0,0);transform:translate3d(33%,0,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes chmln-fade_in_right{from{opacity:0;-webkit-transform:translate3d(33%,0,0);transform:translate3d(33%,0,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.chmln-fade_in_right{-webkit-animation-name:chmln-fade_in_right;animation-name:chmln-fade_in_right}@-webkit-keyframes chmln-fade_in_up{from{opacity:0;-webkit-transform:translate3d(0,33%,0);transform:translate3d(0,33%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes chmln-fade_in_up{from{opacity:0;-webkit-transform:translate3d(0,33%,0);transform:translate3d(0,33%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.chmln-fade_in_up{-webkit-animation-name:chmln-fade_in_up;animation-name:chmln-fade_in_up}@-webkit-keyframes chmln-fade_out{from{opacity:1}to{opacity:0}}@keyframes chmln-fade_out{from{opacity:1}to{opacity:0}}.chmln-fade_out{-webkit-animation-name:chmln-fade_out;animation-name:chmln-fade_out}.chmln-animated{-webkit-animation-duration:1s;animation-duration:1s;-webkit-animation-fill-mode:both;animation-fill-mode:both}@media (prefers-reduced-motion){.chmln-animated{-webkit-animation:unset !important;animation:unset !important;-webkit-transition:none !important;transition:none !important}}.chmln-animated.chmln-fade_in,.chmln-animated.chmln-fade_out{-webkit-animation-duration:750ms;animation-duration:750ms}.chmln-animated.chmln-animated-0750{-webkit-animation-duration:750ms;animation-duration:750ms}.chmln-animated.chmln-animated-0500{-webkit-animation-duration:500ms;animation-duration:500ms}.chmln-animated.chmln-animated-0250{-webkit-animation-duration:250ms;animation-duration:250ms}.chmln-animated.chmln-animated-0100{-webkit-animation-duration:100ms;animation-duration:100ms}</style><style id="chmln-stylesheet-custom" type="text/css"></style></div><iframe data-product="web_widget" title="No content" tabindex="-1" aria-hidden="true" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/saved_resource(1).html" style="width: 0px; height: 0px; border: 0px; position: absolute; top: -9999px;"></iframe><div id="ads"></div>
<script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1174423269336130");fbq("track","PageView");</script>
<noscript><img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1174423269336130&amp;ev=PageView&amp;noscript=1"></noscript>

<script type="text/javascript" id="">function getCookie(a){a+="\x3d";var d=decodeURIComponent(document.cookie);d=d.split(";");for(var c=0;c<d.length;c++){for(var b=d[c];" "==b.charAt(0);)b=b.substring(1);if(0==b.indexOf(a))return b.substring(a.length,b.length)}return""}function parseJwt(a){a=a.split(".")[1];a=a.replace("-","+").replace("_","/");return JSON.parse(window.atob(a))}
function setCookie(a,d,c){var b=new Date;b.setTime(b.getTime()+864E5*c);c="expires\x3d"+b.toUTCString();document.cookie=a+"\x3d"+d+";"+c+";path\x3d/;domain\x3d.topcoder.com"}var get_tcjwt=getCookie("tcjwt");if(""!=get_tcjwt){var decode=parseJwt(get_tcjwt),clientID=decode.clientID;setCookie("_cid",clientID,365)};</script>  <script type="text/javascript" id="">if("undefined"!=typeof window.drift)window.drift.on("startConversation",function(){ga("send","event","Drift Widget","Chat Started")});</script>  <script type="text/javascript" id="">function getParameterByName(d,b){b||(b=window.location.href);d=d.replace(/[\[\]]/g,"\\$\x26");var a=new RegExp("[?\x26]"+d+"(\x3d([^\x26#]*)|\x26|#|$)");return(a=a.exec(b))?a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):"":null}function getCookie(d){d+="\x3d";var b=decodeURIComponent(document.cookie);b=b.split(";");for(var a=0;a<b.length;a++){for(var c=b[a];" "==c.charAt(0);)c=c.substring(1);if(0==c.indexOf(d))return c.substring(d.length,c.length)}return""}
function setCookie(d,b,a){var c=new Date;c.setTime(c.getTime()+864E5*a);a="expires\x3d"+c.toUTCString();document.cookie=d+"\x3d"+b+";"+a+";path\x3d/;domain\x3d.topcoder.com"}var clientid=ga.getAll()[0].get("clientId"),gclid=getParameterByName("gclid");""==getCookie("_gacid")&&setCookie("_gacid",clientid,730);null!=getCookie("_gclid")&&""==getCookie("_gclid")&&setCookie("_gclid",gclid,30);</script>  
  <div><iframe title="Opens a widget where you can find more information" id="launcher" tabindex="0" class="zEWidget-launcher zEWidget-launcher--active" style="border: none; background: transparent; z-index: 999998; transform: translateZ(0px); position: fixed; transition: opacity 250ms cubic-bezier(0.645, 0.045, 0.355, 1) 0s, top, bottom; opacity: 1; width: 141px; height: 50px; max-height: 551px; min-height: 50px; margin: 10px 20px; right: 0px; bottom: 0px;" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/saved_resource(2).html"></iframe></div><div><iframe title="Find more information here" id="webWidget" tabindex="-1" class="zEWidget-webWidget " style="border: none; background: transparent; z-index: 999999; transform: translateZ(0px); position: fixed; transition: opacity 250ms cubic-bezier(0.645, 0.045, 0.355, 1) 0s, top, bottom; opacity: 0; width: 357px; height: 100%; max-height: 565px; min-height: 150px; margin-left: 8px; margin-right: 8px; top: -9999px;" src="./Community - Competitive Programming - Competitive Programming Tutorials - Power up C++ with the Standard Template Library_ Part II_ Advanced Uses_files/saved_resource(3).html"></iframe></div></body><span class="gr__tooltip"><span class="gr__tooltip-content"></span><i class="gr__tooltip-logo"></i><span class="gr__triangle"></span></span></html>